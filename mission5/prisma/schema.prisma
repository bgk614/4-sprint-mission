generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ObjType {
  Article
  Product
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique @db.VarChar(255)
  nickname  String    @unique @db.VarChar(255)
  password  String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Products  Product[]
  Articles  Article[]
  Comments  Comment[]
  Likes     Like[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?
  price       Int
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]

  @@index([authorId])
}

model Article {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  comments  Comment[]
  likes     Like[]

  @@index([authorId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int

  articleId Int?
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([productId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  articleId Int?
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([authorId, articleId])
  @@unique([authorId, productId])
}

// TODO: RefreshToken 모델 정의 추가